var documenterSearchIndex = {"docs":
[{"location":"#Thermobench.jl-1","page":"Thermobench.jl","title":"Thermobench.jl","text":"","category":"section"},{"location":"#","page":"Thermobench.jl","title":"Thermobench.jl","text":"DocTestSetup = :(using Thermobench, DataFrames)","category":"page"},{"location":"#","page":"Thermobench.jl","title":"Thermobench.jl","text":"using Gnuplot\nGnuplot.quitall()\nmkpath(\"build/assets\")\nGnuplot.options.term = \"unknown\"\nempty!(Gnuplot.options.init)\npush!( Gnuplot.options.init, linetypes(:Set1_5, lw=1.5, ps=1.5))\nsaveas(file; width=800, height=350) = save(term=\"pngcairo size $width,$height fontscale 0.8\", output=\"build/assets/$(file).png\")","category":"page"},{"location":"#","page":"Thermobench.jl","title":"Thermobench.jl","text":"Julia module for working with thermobench-produced CSV files.","category":"page"},{"location":"#Installation-1","page":"Thermobench.jl","title":"Installation","text":"","category":"section"},{"location":"#","page":"Thermobench.jl","title":"Thermobench.jl","text":"Thermobench.jl can be installed using the Julia package manager. From the Julia REPL, type ] to enter the Pkg REPL mode and run:","category":"page"},{"location":"#","page":"Thermobench.jl","title":"Thermobench.jl","text":"pkg> develop /path/to/thermobench/julia","category":"page"},{"location":"#","page":"Thermobench.jl","title":"Thermobench.jl","text":"Alternatively, if you want to use the same versions of packages as the author of the package, run:","category":"page"},{"location":"#","page":"Thermobench.jl","title":"Thermobench.jl","text":"(@v1.4) pkg> activate /path/to/thermobench/julia\n(Thermobench) pkg> instantiate","category":"page"},{"location":"#Usage-1","page":"Thermobench.jl","title":"Usage","text":"","category":"section"},{"location":"#","page":"Thermobench.jl","title":"Thermobench.jl","text":"Thermobench package supports plotting with Gnuplot.jl package so you will most likely need both packages:","category":"page"},{"location":"#","page":"Thermobench.jl","title":"Thermobench.jl","text":"using Thermobench, Gnuplot","category":"page"},{"location":"#","page":"Thermobench.jl","title":"Thermobench.jl","text":"You can also create a shortcut T for accessing non-exported members of Thermobench package.","category":"page"},{"location":"#","page":"Thermobench.jl","title":"Thermobench.jl","text":"const T = Thermobench\nnothing # hide","category":"page"},{"location":"#","page":"Thermobench.jl","title":"Thermobench.jl","text":"The simplest way to using the package is the multi_fit function. In the example below, it reads the data from a CSV file and fits a thermal model to it. The result can be directly plotted by Gnuplot.jl:","category":"page"},{"location":"#","page":"Thermobench.jl","title":"Thermobench.jl","text":"@gp multi_fit(\"test.csv\")\nsaveas(\"test-mf\") # hide","category":"page"},{"location":"#","page":"Thermobench.jl","title":"Thermobench.jl","text":"(Image: )","category":"page"},{"location":"#","page":"Thermobench.jl","title":"Thermobench.jl","text":"You can pass multiple CSV files to multi_fit. The result is shown as a DataFrame, which makes it easy to compare the results. You can also specify additional keywords to control the operation. Below we use subtract to subtract ambient temperature from the data to fit, use_measurements to produce results with confidence intervals and use_cmpfit to use alternative fitting solver.","category":"page"},{"location":"#","page":"Thermobench.jl","title":"Thermobench.jl","text":"mf = multi_fit([\"test.csv\", \"test2.csv\"], subtract=:ambient, use_cmpfit=true, use_measurements=true)\n@gp mf\nsaveas(\"test-mf2\") # hide","category":"page"},{"location":"#","page":"Thermobench.jl","title":"Thermobench.jl","text":"(Image: )","category":"page"},{"location":"#","page":"Thermobench.jl","title":"Thermobench.jl","text":"In most cases, we are interested only in T_ parameters. These can be plot (and compared between multiple data sets) with plot_Tinf.","category":"page"},{"location":"#","page":"Thermobench.jl","title":"Thermobench.jl","text":"mf2 = multi_fit([\"test.csv\", \"test2.csv\"], :CPU_1_temp, name=\"CPU1\", subtract=:ambient, use_cmpfit=true, use_measurements=true)\n@gp T.plot_Tinf(rename!(mf, \"CPU0\"), mf2) key=\"left\"\nsaveas(\"tinf\") # hide","category":"page"},{"location":"#","page":"Thermobench.jl","title":"Thermobench.jl","text":"(Image: )","category":"page"},{"location":"#Raw-thermobench-data-1","page":"Thermobench.jl","title":"Raw thermobench data","text":"","category":"section"},{"location":"#","page":"Thermobench.jl","title":"Thermobench.jl","text":"To access raw data from thermobench CSV files, use the Thermobench.read function.","category":"page"},{"location":"#","page":"Thermobench.jl","title":"Thermobench.jl","text":"using DataFrames\nd = T.read(\"test.csv\");\npropertynames(d)\nfirst(d.df, 6)","category":"page"},{"location":"#Reference-1","page":"Thermobench.jl","title":"Reference","text":"","category":"section"},{"location":"#","page":"Thermobench.jl","title":"Thermobench.jl","text":"Modules = [Thermobench]","category":"page"},{"location":"#Thermobench.fit-Tuple{Array{Float64,1},Any}","page":"Thermobench.jl","title":"Thermobench.fit","text":"fit(\n    time_s::Vector{Float64},\n    data::Vector{Float64};\n    order::Int64 = 2,\n    p0 = nothing,\n    tau_bounds = [(1, 60*60)],\n    k_bounds = [(-120, 120)],\n    T_bounds = (0, 120),\n    use_cmpfit::Bool = false,\n )\n\nFit a thermal model to time series given by time_s and data. The thermal model has the form of\n\nT(t) = T_ + sum_i=1^orderk_ie^-fractτ_i\n\nwhere T_∞, kᵢ and τᵢ are the coefficients found by this function.\n\nIf use_cmpfit is true, use CMPFit.jl package rather than LsqFit.jl. LsqFit doesn't work well in constrained fit.\n\nYou can limit the values of fitted parameters with *_bounds parameters. Each bound is a tuple of lower and upper limit. T_bounds limits the T∞ parameter. tau_bounds and k_bounds limit the coefficients of exponential functions ke^-tτ. If you specify less tuples than the order of the model, the last limit will be repeated.\n\nExample\n\nd = read(\"test.csv\")\nf = fit(d.df.time, d.df.CPU_0_temp)\ncoef(f)\nThermobench.printfit(f)\n\n\n\n\n\n","category":"method"},{"location":"#Thermobench.interpolate!-Tuple{AbstractDataFrame}","page":"Thermobench.jl","title":"Thermobench.interpolate!","text":"interpolate!(df::AbstractDataFrame)\n\nIn-place version of interpolate.\n\n\n\n\n\n","category":"method"},{"location":"#Thermobench.interpolate-Tuple{AbstractDataFrame}","page":"Thermobench.jl","title":"Thermobench.interpolate","text":"interpolate!(df::AbstractDataFrame)\n\nReplace missing values with results of linear interpolation performed against the first column (time).\n\njulia> x = DataFrame(t=[0.0, 1, 2, 3, 1000, 1001], v=[0.0, missing, missing, missing, 1000.0, missing])\n6×2 DataFrame\n│ Row │ t       │ v        │\n│     │ Float64 │ Float64? │\n├─────┼─────────┼──────────┤\n│ 1   │ 0.0     │ 0.0      │\n│ 2   │ 1.0     │ missing  │\n│ 3   │ 2.0     │ missing  │\n│ 4   │ 3.0     │ missing  │\n│ 5   │ 1000.0  │ 1000.0   │\n│ 6   │ 1001.0  │ missing  │\n\njulia> interpolate(x)\n6×2 DataFrame\n│ Row │ t       │ v        │\n│     │ Float64 │ Float64? │\n├─────┼─────────┼──────────┤\n│ 1   │ 0.0     │ 0.0      │\n│ 2   │ 1.0     │ 1.0      │\n│ 3   │ 2.0     │ 2.0      │\n│ 4   │ 3.0     │ 3.0      │\n│ 5   │ 1000.0  │ 1000.0   │\n│ 6   │ 1001.0  │ missing  │\n\n\n\n\n\n\n","category":"method"},{"location":"#Thermobench.multi_fit","page":"Thermobench.jl","title":"Thermobench.multi_fit","text":"multi_fit(sources, columns = :CPU_0_temp;\n          name = nothing,\n          timecol = :time,\n          use_measurements = false,\n          order::Int64 = 2,\n          subtract = nothing,\n          kwargs...)::MultiFit\n\nCall fit() for all sources and report the results (coefficients etc.) in DataFrame. When use_measurements is true, report coefficients with their confidence intervals as Measurement objects.\n\nsubtract specifies the column (symbol), which is subtracted from data after interpolating its values with interpolate. This intended for subtraction of ambient temperature.\n\njulia> multi_fit(\"test.csv\", [:CPU_0_temp :CPU_1_temp])\nThermobench.MultiFit: test.csv\n    2×8 DataFrame\n│ Row │ name     │ column     │ rmse     │ Tinf    │ k1       │ tau1    │ k2       │ tau2    │\n│     │ String   │ Symbol     │ Float64  │ Float64 │ Float64  │ Float64 │ Float64  │ Float64 │\n├─────┼──────────┼────────────┼──────────┼─────────┼──────────┼─────────┼──────────┼─────────┤\n│ 1   │ test.csv │ CPU_0_temp │ 0.154483 │ 53.0003 │ -8.1627  │ 59.366  │ -13.1247 │ 317.63  │\n│ 2   │ test.csv │ CPU_1_temp │ 0.14436  │ 54.0527 │ -7.17072 │ 51.1449 │ -14.3006 │ 277.687 │\n\n\n\n\n\n","category":"function"},{"location":"#Thermobench.plot_Tinf-Union{Tuple{Vararg{Thermobench.MultiFit,N}}, Tuple{N}} where N","page":"Thermobench.jl","title":"Thermobench.plot_Tinf","text":"Plot T_ as bargraphs.\n\n\n\n\n\n","category":"method"},{"location":"#Thermobench.plot_fit","page":"Thermobench.jl","title":"Thermobench.plot_fit","text":"plot_fit(sources, columns = :CPU_0_temp;\n         timecol = :time,\n         kwargs...)\n\nCalls fit for all sources and columns and produce a graph using gnuplot.\n\nsources can be a file name (String) or a DataFrame or an array of these.\n\ntimecol is the columns with time of measurement.\n\nSetting plotexp to true causes the individual fitted exponentials to be plotted in addition to the compete fitted function.\n\nOther kwargs are passed to fit.\n\nExample\n\nplot_fit(\n    [\"file$i.csv\" for i in 1:3],\n    [:CPU_0_temp, :GPU_0_temp],\n    order = 2\n)\n\njulia> plot_fit(\"test.csv\", [:CPU_0_temp :CPU_1_temp])\nLsqFit.LsqFitResult{Array{Float64,1},Array{Float64,1},Array{Float64,2},Array{Float64,1}}([54.05270193617456, -14.300579425822987, 277.6871572171704, -7.170707187492722, 51.1449427363974], [0.4814153228588438, 0.48210393166134935, -0.02827469472873645, 0.1590733915246858, -0.25639810428151577, -0.2745094012142104, -0.29552833686121005, -0.3190430919820457, 0.054645980053877, -0.1740621999878087  …  -0.10112334959897851, -0.09697970488952024, -0.09284269210126439, 0.11127121083011815, 0.11537443369089573, 0.11946698541304812, -0.0764592578095602, -0.07240014726207278, 0.1316443697488907, -0.26432565427360544], [1.0 1.0 … 1.0 -0.0; 1.0 0.9999870640586986 … 0.9999297674088051 -9.84651920490284e-6; … ; 1.0 0.07839196015996269 … 9.920656343511463e-7 -1.9227241374458278e-6; 1.0 0.07811016470837553 … 9.728568932023543e-7 -1.8881625354797446e-6], true, Float64[])\n\n\n\n\n\n","category":"function"},{"location":"#Thermobench.printfit-Tuple{Any}","page":"Thermobench.jl","title":"Thermobench.printfit","text":"printfit(fit; minutes = false)\n\nReturn the fitted function as Gnuplot enhanced string. Time constants (τᵢ) are sorted from smallest to largest.\n\n\n\n\n\n","category":"method"},{"location":"#Thermobench.@symarray-Tuple","page":"Thermobench.jl","title":"Thermobench.@symarray","text":"Construct array of symbols from arguments.\n\nUseful for constructing column names, e.g.,\n\n@symarray Cortex_A57_temp Denver2_temp\n\n\n\n\n\n","category":"macro"},{"location":"#Thermobench.Data","page":"Thermobench.jl","title":"Thermobench.Data","text":"mutable struct Data\n    df::DataFrame\n    name::String                # label for plotting\n    meta::Dict\nend\n\nData read from thermobench CSV file.\n\n\n\n\n\n","category":"type"},{"location":"#Thermobench.Data-Tuple{Thermobench.Data,AbstractDataFrame}","page":"Thermobench.jl","title":"Thermobench.Data","text":"Copies existing Data d, but uses different DataFrame df.\n\n\n\n\n\n","category":"method"},{"location":"#Thermobench.normalize_units!-Tuple{Thermobench.Data}","page":"Thermobench.jl","title":"Thermobench.normalize_units!","text":"Normalizes units to seconds and °C.\n\n\n\n\n\n","category":"method"},{"location":"#Thermobench.read-Tuple{Any}","page":"Thermobench.jl","title":"Thermobench.read","text":"read(source; normalizeunits=true, stripunits=true, name=nothing, kwargs...)::Data\n\nReads thermobech CSV file source, which can be a file name or an IO stream. Returns Thermobench.Data type, which embeds a data frame. By default units are normalized with normalize_units! and stripped from column names. name and kwargs are stored in result as metadata. If name is not specified it is set (if possible) to the basename of the CSV file.\n\n\n\n\n\n","category":"method"},{"location":"#Thermobench.strip_units!-Tuple{Thermobench.Data}","page":"Thermobench.jl","title":"Thermobench.strip_units!","text":"Strips unit names from column names.\n\n\n\n\n\n","category":"method"},{"location":"#Thermobench.thermocam_correct!-Tuple{Thermobench.Data}","page":"Thermobench.jl","title":"Thermobench.thermocam_correct!","text":"thermocam_correct!(d::Data)\n\nEstimate correction for thermocamera temperatures and apply it. Return the correction coefficients.\n\nCorrection is calculated from CPU_0_temp and cam_cpu columns. This and the names of modified columns are currently hard coded.\n\n\n\n\n\n","category":"method"},{"location":"#","page":"Thermobench.jl","title":"Thermobench.jl","text":"DocTestSetup = nothing","category":"page"}]
}
