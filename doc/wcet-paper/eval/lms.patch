diff --git a/bench/kernel/lms/lms.c b/bench/kernel/lms/lms.c
index 0179960..d772999 100644
--- a/bench/kernel/lms/lms.c
+++ b/bench/kernel/lms/lms.c
@@ -76,7 +76,7 @@ static float fabs(float n)
   return f;
 }
 
-static float sqrt(float val)
+static float lms_sqrtf(float val)
 {
   float x = val/10;
 
@@ -169,7 +169,7 @@ static float gaussian()
         }       /* make radius less than 1 */
 
 /* remap v1 and v2 to two Gaussian numbers */
-        fac = sqrt(-2.0f*log(r)/r);
+        fac = lms_sqrtf(-2.0f*log(r)/r);
         gstore = v1*fac;        /* store one */
         gaus = v2*fac;          /* return one */
         ready = 1;              /* set ready flag */
@@ -183,33 +183,35 @@ static float gaussian()
     return gaus;
 }
 
-
-int main()
-{
-
-    static float d[N],b[21];
-    float signal_amp,noise_amp,arg,x,y;
-    int k;
+int lms_main(){
+  static float d[N],b[21];
+  float signal_amp,noise_amp,arg,x,y;
+  int k;
 /* create signal plus noise */
-    signal_amp = sqrt(2.0f);
-    noise_amp = 0.2f * sqrt(12.0f);
-    arg = 2.0f * PI / 20.0f;
-    _Pragma("loopbound min 201 max 201")
-    for(k = 0 ; k < N ; k++) {
-        d[k] = signal_amp*sin(arg*k) + noise_amp*gaussian();
-    }
+  signal_amp = lms_sqrtf(2.0f);
+  noise_amp = 0.2f * lms_sqrtf(12.0f);
+  arg = 2.0f * PI / 20.0f;
+  _Pragma("loopbound min 201 max 201")
+  for(k = 0 ; k < N ; k++) {
+      d[k] = signal_amp*sin(arg*k) + noise_amp*gaussian();
+  }
 
 /* scale based on L */
-    mu = 2.0f * mu/(L+1);
+  mu = 2.0f * mu/(L+1);
 
-    x = 0.0f;
-    _Pragma("loopbound min 201 max 201")
-    for(k = 0 ; k < N ; k++) {
-        lms(x,d[k],b,L,mu,0.01f);
+  x = 0.0f;
+  _Pragma("loopbound min 201 max 201")
+  for(k = 0 ; k < N ; k++) {
+      lms(x,d[k],b,L,mu,0.01f);
 /* delay x one sample */
-        x = d[k];
-    }
-    return 0;
+      x = d[k];
+  }
+  return 0;
+}
+
+int main()
+{
+  return lms_main();
 }
 
 /*
