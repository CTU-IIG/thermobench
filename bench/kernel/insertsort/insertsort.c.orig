/*

  This program is part of the TACLeBench benchmark suite.
  Version V 1.x

  Name: insertsort

  Author: unknown

  Function: Insertion sort for 10 integer numbers.                            
     The integer array insertsort_a[] is initialized in main function. 
     Input-data dependent nested loop with worst-case of        
     (n^2)/2 iterations (triangular loop).

  Source: MRTC
          http://www.mrtc.mdh.se/projects/wcet/wcet_bench/insertsort/insertsort.c

  Changes: a brief summary of major functional changes (not formatting)

  License: general open-source

*/

/* Remove the following #define for actual WCET analyses! */
/*
#define PROFILING
*/

#ifdef PROFILING
#include <stdio.h>
#endif

/*
  Forward declaration of functions
*/
void insertsort_initialize(unsigned int* array);
void insertsort_init();
int  insertsort_return();
void insertsort_main();
int main( void );

/*
  Declaration of global variables
*/
unsigned int insertsort_a[11];
#ifdef PROFILING
    /* Profiling variables. Remove for actual WCET analyses. */
    int insertsort_iters_i = 0, insertsort_min_i = 100000, insertsort_max_i = 0;
    int insertsort_iters_a = 0, insertsort_min_a = 100000, insertsort_max_a = 0;
#endif

/*
  Initialization- and return-value-related functions
*/

void insertsort_initialize(unsigned int* array)
{

	register int i;
	_Pragma( "loopbound min 10 max 10" )
	for ( i = 0; i < 10; i++ )
		insertsort_a[i] = array[i];
		
}


void insertsort_init()
{	
	unsigned int array[11] = {0, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2};
	insertsort_initialize(array);
}	

int insertsort_return()
{
	return 0;
}


/*
  Main functions
*/


void _Pragma( "entrypoint" ) insertsort_main()
{
    int  i,j, temp;
    i = 2;
    #ifdef PROFILING
    insertsort_iters_i = 0;
    #endif
    _Pragma("loopbound min 9 max 9")
    while(i <= 10) {
	    #ifdef PROFILING
	    insertsort_iters_i++;
	    #endif

	    j = i;
	    #ifdef PROFILING
	    insertsort_iters_a = 0;
	    #endif
	    _Pragma("loopbound min 1 max 9")
	    while (insertsort_a[j] < insertsort_a[j-1])
	    {
		    #ifdef PROFILING
		    insertsort_iters_a++;
		    #endif
		    temp = insertsort_a[j];
		    insertsort_a[j] = insertsort_a[j-1];
		    insertsort_a[j-1] = temp;
		    j--;
	    }

	    #ifdef PROFILING
	    if ( insertsort_iters_a < insertsort_min_a )
	    insertsort_min_a = insertsort_iters_a;
	    if ( insertsort_iters_a > insertsort_max_a )
	    insertsort_max_a = insertsort_iters_a;
	    #endif

	    i++;
    }

    #ifdef PROFILING
    if ( insertsort_iters_i < insertsort_min_i )
    insertsort_min_i = insertsort_iters_i;
    if ( insertsort_iters_i > insertsort_max_i )
    insertsort_max_i = insertsort_iters_i;
    #endif

    #ifdef PROFILING
    printf( "i-loop: [%d, %d]\n", insertsort_min_i, insertsort_max_i );
    printf( "a-loop: [%d, %d]\n", insertsort_min_a, insertsort_max_a );
    #endif
}

int main( void )
{
	insertsort_init();
	insertsort_main();
    return (insertsort_return());
}

